akka {
  # Dead letters log
  log-dead-letters = off

  # Coordinated configure
  coordinated-shutdown {
     terminate-actor-system = on
     run-by-actor-system-terminate = on
     run-by-jvm-shutdown-hook = on
  }

  # List FQCN of extensions which shall be loaded at actor system startup.
  # Should be on the format: 'extensions = ["foo", "bar"]' etc.
  # See the Akka Documentation for more info about Extensions
  extensions = ["akka.actor.CoordinatedShutdown"]

  actor {
    # provider=remote is possible, but prefer cluster
    provider = remote

    serializers {
      kryo = "io.openjob.common.kryo.KryoSerializer"
    }

    serialization-bindings {
      "java.io.Serializable" = kryo
    }

    cluster-dispatcher {
      # Dispatcher is the name of the event-based dispatcher
      type = PinnedDispatcher
      # What kind of ExecutionService to use
      executor = "thread-pool-executor"
    }

    server-dispatcher {
      # Dispatcher is the name of the event-based dispatcher
      type = Dispatcher
      # What kind of ExecutionService to use
      executor = "fork-join-executor"
      # Configuration for the fork join pool
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 2
        # Parallelism (threads) ... ceil(available processors * factor)
        parallelism-factor = 6.0
        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 128
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 10
    }

    worker-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 4
      }
      throughput = 10
    }

    worker-delay-instance-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 4
      }
      throughput = 10
    }

    worker-delay-instance-pull-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 4
      }
      throughput = 10
    }

    worker-delay-instance-status-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 4
      }
      throughput = 10
    }

    worker-heartbeat-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 4
      }
      throughput = 10
    }

    worker-instance-status-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 4
      }
      throughput = 10
    }

    worker-instance-task-log-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 4
      }
      throughput = 10
    }
  }
  remote {
    artery {
      transport = tcp # See Selecting a transport below
      # External (logical)
      canonical.hostname = "127.0.0.1"
      canonical.port = 25520

      # Internal (bind)
      bind.hostname = 0.0.0.0
      bind.port = 25520
    }
  }
}